Os scripts `publisher.py` e `subscriber.py` utilizam a biblioteca `paho-mqtt` para comunicação via MQTT. Eles permitem a publicação e recepção de mensagens em um tópico MQTT usando um broker público. O código do publisher é responsável por enviar mensagens para um tópico MQTT. Primeiro, importa a biblioteca `paho.mqtt.client` como `mqtt`. Depois, define as variáveis `broker = "broker.hivemq.com"`, que é o endereço do broker MQTT público, `port = 1883`, que é a porta padrão do MQTT, e `topic = "senai/dev"`, que é o tópico onde as mensagens serão publicadas. Em seguida, cria um cliente MQTT usando `mqtt.Client()` e conecta ao broker com `client.connect(broker, port)`. O código entra em um loop infinito onde o usuário digita uma mensagem, que é enviada para o tópico com `client.publish(topic, mensagem)`. Após o envio, imprime uma confirmação no console informando que a mensagem foi publicada.  
O código do subscriber é responsável por receber mensagens enviadas para o tópico MQTT. Assim como no publisher, ele importa `paho.mqtt.client` como `mqtt` e define as mesmas variáveis `broker`, `port` e `topic`. Depois, define a função `on_message(client, userdata, msg)`, que imprime a mensagem recebida e decodifica seu conteúdo. Cria um cliente MQTT com `mqtt.Client()`, configura o callback `on_message` e conecta ao broker. O subscriber então assina o tópico definido com `client.subscribe(topic)` e imprime no console que está aguardando mensagens. Por fim, entra em um loop infinito com `client.loop_forever()`, mantendo a escuta ativa para novas mensagens. Dessa forma, o `publisher.py` publica mensagens no tópico e o `subscriber.py` as recebe.
